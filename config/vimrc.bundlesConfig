" Rainbow {
  let g:rainbow_active = 1
" }

" Vim-indent-guides {
" <lader>ig toggles indent guides
" let g:indent_guides_enable_on_vim_startup = 1
" }

" Lightline {
" Powerfont Separators:                                       
  let g:lightline = {
    \   'colorscheme' : 'material',
    \   'enable': { 'tabline': 1 },
    \   'separator': { 'left':'' ,'right':'' },
    \   'subseparator' : { 'left': '','right': '' },
    \   'tabline_separator' : { 'left' : '', 'right' : '' },
    \   'tabline_subseparator' : { 'left' : '', 'right' : 'R' },
    \   'active' : {
    \     'left' : [['mode', 'paste'], [ 'gitbranch'], ['filename', 'modified'] ]
    \   },
    \   'component_function': {
    \     'fileformat': 'MyFileformat',
    \     'filetype': 'MyIconFileType',
    \     'gitbranch': 'MyGitBranch',
    \   }
    \ }
  " Some icons for file format:            גּ     者
  function! MyIconFileType()
    " return winwidth(0)>70 ? (strlen(&filetype) ? (&filetype . ' ' . WebDevIconsGetFileTypeSymbol()) : 'no ft') : ''
    return winwidth(0)>65 ? (strlen(&filetype) ? WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  endfunction

  function! MyIconFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction

  function! MyGitBranch()
    return ('' . ' ' . FugitiveHead())
  endfunction
" }

" NerdTREE {
  if !has('gui_running')
      let g:airline_powerline_fonts=1
  endif
  "let g:NERDTreeDirArrowExpandable = '' "'▸'       ﱮ
  "let g:NERDTreeDirArrowCollapsible = '' "'▾'
  let NERDTreeShowBookmarks=1
  let NERDTreeIgnore=['\.pyc','\.$', '\.\.$', '\~$', '\.swo$','\.swp$', '\.git$', '\.hg$', '\.svn$', '\.bzr$', 'node_modules$[[dir]]', 'build$[[dir]]', 'packages$[[dir]]', 'pub$[[dir]]']
  let NERDTreeRespectWildIgnore=1 "Respect wildingore setting
  let NERDTreeChDirMode=2
  let NERDTreeQuitOnOpen=1
  let NERDTreeMouseMode=2
  let NERDTreeShowHidden=0
  let NERDTreeKeepTreeInNewTab=1
  let NERDTreeStatusline=0
  let NERDTreeMinimalUI=1
  highlight! link NERDTreeFlags NERDTreeDir
  " se supone que es para evitar colores raros
" }

" DevIcons {
if exists('g:plugs["vim-devicons"]')
  let g:webdevicons_conceal_nerdtree_brackets = 1 " whether or not to show the nerdtree brackets around flags
  let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
endif
" }

" CtrlP {
if exists('g:plugs["ctrlp.vim"]')
  let g:ctrlp_match_window = 'bottom,order:ttb'  "sort top to bottom
  let g:ctrlp_working_path_mode = 'ra'  "0 - respect cwd, c - dir of current file, r - look for .git, a - like 0 if not under cwd
  let g:ctrlp_custom_ignore = {
      \ 'dir':  '\.git$\|\.hg$\|\.svn$\|node_modules$',
      \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
  if executable('ag')
      " Replace native grep with ag
      set grepprg=ag\ --vimgrep\ --hidden\ $1 " Si no funciona eliminar $1
      set grepformat=%f:%l:%c%m
      " set ctrlp to use ag
      let g:ctrlp_user_command = 'ag --nocolor --hidden -l -g "" %s'
      let g:ctrlp_use_caching=0 " ag is fast enough not to need caching
  endif
endif
" }

" Ack/Ag {
if exists('g:plugs["ack.vim"]')
  let g:ackprg = 'ag --vimgrep'
endif
" }

" FZF {
if exists('g:plugs["fzf"]')
  let g:fzf_buffers_jump = 1
  let g:fzf_preview_window = (&columns >=120 ? 'right:40%' : (&lines > 50 ? 'up:50%' : '')) " Enable allways preview on the right
  let g:fzf_layout = { 'down' : '~25%' }
  " let g:fzf_layout = { 'window': { 'width': 0.9, 'height':0.7 } }
  if executable('ag')
    :let $FZF_DEFAULT_COMMAND='ag -l --nocolor --hidden -g ""'
  endif
  nnoremap <silent> <leader>pp :call fzf#vim#files('',
        \ {'source': 'ag --hidden -f -g ""', 'window': '12new'})<cr>


  " Inspired in FZF-vim
  function! s:p(bang, opts)
    let preview_window = a:bang ? '' : g:fzf_preview_window
    echom preview_window
    if len(preview_window)
      return call('fzf#vim#with_preview', add([a:opts], preview_window))
    endif
    return a:opts
  endfunction

  command! -bang -nargs=* AgFiles
        \ call fzf#vim#files('',
        \ s:p(<bang>0, {'source': 'ag --hidden -f -g ""'} ))

endif
" }

" POLYGLOT & Extra syntaxes
" pangloss / Vim-Javascript <polyglot> {
  let g:javascript_plugin_jsdoc   = 1   " JsDoc Enabled
  " Custom conceal chars:
  set conceallevel=0  " Disable conceal
  let g:javascript_conceal_null                 = "ø"
  let g:javascript_conceal_NaN                  = "ℕ"
  let g:javascript_conceal_function             = "ƒ"
  let g:javascript_conceal_this                 = "@"
  let g:javascript_conceal_return               = "⇚"
  let g:javascript_conceal_undefined            = "¿"
  let g:javascript_conceal_prototype            = "¶"
  let g:javascript_conceal_static               = "•"
  let g:javascript_conceal_super                = "Ω"
  let g:javascript_conceal_arrow_function       = "⇒"
  let g:javascript_conceal_noarg_arrow_function = "🞅"
  let g:javascript_conceal_underscore_arrow_function = "🞅"
" }
"  maxmellon / vim JSX pretty {
  let g:vim_jsx_pretty_disable_tsx = 1 " Disable JSX for TS (another script)
  let g:vim_jsx_pretty_colorful_config = 1 " colourful
"  }


" EMMET (HTML) {
  " let g:user_emmet_mode='n'    "only enable normal mode functions.
  " let g:user_emmet_mode='inv'  "enable all functions, which is equal to
  " let g:user_emmet_mode='a'    "enable all function in all mode.
  " To enable only for html/css/js/jsx files:
  let g:user_emmet_install_global = 0
  autocmd FileType html,css,js,jsx EmmetInstall
  "Trigger key is <C-Y> , (ctrl+y ,) con la coma tras el ctrl y
  " let g:user_emmet_leader_key='<C-Z>' " para cambiar la parte del ctrl y
" }

" " JSON {
"     let g:vim_json_syntax_conceal = 0
" " }
" " TypeScript {
"     " If indenting does not work as desired
"     " let g:typescript_indent_disable = 1
"     " Compiler options
"     " let g:typescript_compiler_binary = 'tsc'
"     " let g:typescript_compiler_options = ''
" " }


" Errors Warnings Bugs
" Symbols from nerdfonts:     ﮖ           謹            
"                   ﮏ ﰸ  ﲲ            﫵 ﱗ ﮢ 戴  塚 
"    ﴫ 
" Gutter/column symbols
let g:lint_error_sign   = ''
let g:lint_warn_sign    = ''
let g:style_error_sign  = ''
let g:style_warn_sign   = ''

" Linting + Completion COC {
if exists('g:plugs["coc.nvim"]')
endif
" }

"Linting ALE  {
if exists('g:plugs["ale"]')
  " let g:ale_completion_enabled = 1    " For now allow ALE to add suggestions
  " (not needed, use deoplete)
  let g:ale_fix_on_save = 1           " Lint on save
  let g:ale_open_list = 1             " Open LWindow on errors
  let g:ale_keep_list_window_open = 1 " Keep it open all the time
  let g:ale_list_window_size=5        " Resize it to 5 lines
  let g:ale_fixers = {
        \ '*': ['remove_trailing_lines', 'trim_whitespace'],
        \ 'javascript': ['eslint']
        \}
  let g:ale_sign_error         = g:lint_error_sign " ⏺ ⏺ • ✗
  let g:ale_sign_warning       = g:lint_warn_sign " ⏺ ⬤  • ⚠
  let g:ale_sign_style_error   = g:style_error_sign " 'ﮙ'  ''
  let g:ale_sign_style_warning = g:style_warn_sign "''  ''
  "  " ALEErrorSign guifg=darkred
  "  " red
  "  " Change how signs are colorized. BG remains same, color only to the symbol
  "  " hi ALEErrorSign ctermbg=NONE ctermfg=red
  "  " hi ALEErrorSign ctermfg=red ctermbg=none
  "  " highlight ALEWarningSign ctermbg=NONE ctermfg=yellow
  " hi ALEErrorSign cterm=bold ctermfg=161 ctermbg=NONE gui=bold guifg=#F92672 guibg=NONE
  " hi ALEWarningSign cterm=bold ctermfg=208 ctermbg=NONE gui=bold guifg=#FD971F guibg=NONE
endif
" }

"Neocomplcache {
if exists('g:plugs["deoplete.nvim"]')
  let g:deoplete#enable_at_startup = 1
  call deoplete#custom#option({
    \ 'auto_complete_delay': 200,
    \ 'smart_case': v:true,
    \ })

  " call deoplete#custom#options('sources', {'_' : ['ale','vim','tag']} " USe only this sources
  call deoplete#custom#source('ale', 'dup', v:true) " onedarkAdd ALE candidates even if already present
  call deoplete#custom#source('ale', 'mark', '') " 
  " call deoplete#custom#source('ternjs', 'mark','')
  call deoplete#custom#source('vim', 'mark','') " 
  call deoplete#custom#source('tag', 'mark','')
  call deoplete#custom#source('buffer', 'mark','﬘')
  call deoplete#custom#source('omni', 'mark','ﱶ') " ﴄ ﱶ卵
  " " deoplete-tern config
  " let g:deoplete#sources#ternjs#timeout = 1
  " let g:deoplete#sources#ternjs#docs = 1
  " let g:deoplete#sources#ternjs#guess = 0
  " let g:deoplete#sources#ternjs#expand_word_forward = 0 "search word matches from cursor to back, not the whole word under cursor
  " neosnippet
  let g:neosnippet#enable_completed_snippet = 0
endif



" vim-markdown {
  let g:vim_markdown_auto_insert_bullets = 0 " Do not add new bullets to list on ENTER
  let g:vim_markdown_fenced_languages = ['bash=sh', 'html', 'css', 'json=javascript', 'javascript', 'python']
  let g:vim_markdown_frontmatter = 1        " YAML support
  let g:vim_markdown_toml_frontmatter = 1   " TOML support
  let g:vim_markdown_json_frontmatter = 1   " JSON FM support
" }

" use dispatch for vim-test
let test#strategy = "dispatch"

" Themes config {

let g:abg_theme_enable_italics  = get(g:, 'abg_theme_enable_italics', 1)
let g:abg_theme_enable_bold     = get(g:, 'abg_theme_enable_bold', 1)
let g:abg_theme_enable_underline= get(g:, 'abg_theme_enable_underline', 1)

" PaperColor Theme {
let g:PaperColor_Theme_Options = {
    \   'theme' : {
    \       'default': {'allow_italic':0, 'allow_bold':0 }
    \   }
    \}

let g:PaperColor_Theme_Options.theme.default.allow_italic = g:abg_theme_enable_italics
let g:PaperColor_Theme_Options.theme.default.allow_bold   = g:abg_theme_enable_bold


" Deeps-Space
let g:deepspace_italics = g:abg_theme_enable_italics
" gruvbox theme
let g:gruvbox_italic    = g:abg_theme_enable_italics
let g:gruvbox_bold      = g:abg_theme_enable_bold
let g:gruvbox_underline = g:abg_theme_enable_underline
let g:gruvbox_udercurl  = g:abg_theme_enable_underline
" one theme
let g:one_allow_italics = g:abg_theme_enable_italics
" space-vim-dark
" autocmd ColorScheme * if (g:colors_name ==? 'space-vim-dark') && (g:abg_theme_enable_italics >=? 1) | hi Comment cterm=italic | endif
" nice colorschemes: ayu (dark & light), deep-space (dark), carbonized-dark,
" molokayo, one, onedark, space-vim-dark, tender
autocmd ColorScheme * :echo "ColorScheme::" .expand('<amatch>')
