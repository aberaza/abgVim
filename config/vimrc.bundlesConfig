

" Lightline {
" POWERFONT SEPARATORS: 
  let g:lightline = {
    \   'separator': { 'left':'' ,'right':'' },
    \   'subseparator' : { 'left': '','right': '' },
    \   'component_function': {
    \     'fileformat': 'MyFileformat',
    \     'filetype': 'MyIconFileType',
    \   }
    \ }

  function! MyIconFileType()
    " return winwidth(0)>70 ? (strlen(&filetype) ? (&filetype . ' ' . WebDevIconsGetFileTypeSymbol()) : 'no ft') : ''
    return winwidth(0)>65 ? (strlen(&filetype) ? WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
  endfunction

  function! MyIconFileformat()
    return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
  endfunction
" }

" NerdTREE {NerdTREE
    if !has('gui_running')
        let g:airline_powerline_fonts=1
    endif
    "let g:NERDTreeDirArrowExpandable = '' "'▸'
    "let g:NERDTreeDirArrowCollapsible = '' "'▾'
    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['\.pyc','\.$', '\.\.$', '\~$', '\.swo$','\.swp$', '\.git$', '\.hg$', '\.svn$', '\.bzr$', 'node_modules$[[dir]]', 'build$[[dir]]', 'packages$[[dir]]', 'pub$[[dir]]']
    let NERDTreeRespectWildIgnore=1 "Respect wildingore setting
    let NERDTreeChDirMode=2
    let NERDTreeQuitOnOpen=1
    let NERDTreeMouseMode=2
    let NERDTreeShowHidden=0
    let NERDTreeKeepTreeInNewTab=1
    let NERDTreeStatusline=0
    let NERDTreeMinimalUI=1
    let g:nerdtree_tabs_open_on_gui_startup=0
    let g:NERDTreeHijackNetrw = 0
" }
" CtrlP {
"   Bundle 'kien/ctrlp.vim'
    " let g:ctrlp_working_path_mode = 'ra'
    let g:ctrlp_match_window = 'bottom,order:ttb'  "sort top to bottom
    let g:ctrlp_working_path_mode = '0' " respect working path changes done in vim
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\.git$\|\.hg$\|\.svn$\|node_modules$',
        \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
    if executable('ag')
        " Replace native grep with ag
        set grepprg=ag\ --nogroup\ --nocolor\ --column
        set grepformat=%f:%l:%c%m
        " set ctrlp to use ag
        let g:ctrlp_user_command = 'ag --nocolor --hidden -l -g "" %s'
        let g:ctrlp_use_caching=0
    endif
" }

" EMMET (HTML) {
    " let g:user_emmet_mode='n'    "only enable normal mode functions.
    " let g:user_emmet_mode='inv'  "enable all functions, which is equal to
    " let g:user_emmet_mode='a'    "enable all function in all mode.
    " To enable only for html/css/js/jsx files:
    let g:user_emmet_install_global = 0
    autocmd FileType html,css,js,jsx EmmetInstall
    "Trigger key is <C-Y> , (ctrl+y ,) con la coma tras el ctrl y
    " let g:user_emmet_leader_key='<C-Z>' " para cambiar la parte del ctrl y
" }

" Surround {
" En visual o command mode
" "Hello World!" -> cs"<p> -> <p>Hello World!</p>
" <p>Hello World!</p> -> cst" -> "Hello World!"
" "Hello World!" -> ds" -> Hello World
" <line visual mode V>
" Hello World -> S<p class="toto"> ->
" <p class="toto">
"   Hello World
" </p>
" and so on
" }

" Vim-Javascript {
    let g:javascript_conceal_null       = "ø"
    let g:javascript_conceal_NaN        = "ℕ"
    let g:javascript_plugin_jsdoc       = 1
" }
" Vim-JSX { 
    let g:jsx_ext_required = 0 "allow jsx for jsx and js files
" }
" JavaScript Libraries Syntax {
    let g:used_javascript_libs = 'angularjs,react'
" }
" JSON {
    let g:vim_json_syntax_conceal = 0
" }
" TypeScript {
    " If indenting does not work as desired
    " let g:typescript_indent_disable = 1
    " Compiler options
    " let g:typescript_compiler_binary = 'tsc'
    " let g:typescript_compiler_options = ''
" }
"Ale {
  let g:ale_open_list = 1 
  let g:ale_keep_list_window_open = 1
    " 'javascript': ['prettier', 'eslint'],\
  let g:ale_linters = {
        \ 'javascript': ['eslint','prettier'], 
        \ 'html' : ['tidy'], 
        \ 'python' : ['pylint', 'pep8']
        \}
  let g:ale_fixers = {
        \ '*': ['remove_trailing_lines', 'trim_whitespace'],
        \ 'javascript': ['prettier', 'eslint']
        \}
  let g:ale_sign_error = '⏺' " Other symbols ⏺ •  \uf658 ✗ 
  let g:ale_sign_warning= '⏺'  "⬤  •  \uf071 ⚠
  let g:ale_sign_style_error = "\ufb99" " ''
  let g:ale_sign_style_warning = "\uf6f5" " ''
  " ALEErrorSign guifg=darkred 
  " red
  " Change how signs are colorized. BG remains same, color only to the symbol
  " hi ALEErrorSign ctermbg=NONE ctermfg=red
  " hi ALEErrorSign ctermfg=red ctermbg=none
  " highlight ALEWarningSign ctermbg=NONE ctermfg=yellow
"}
"Syntastic {
    " let g:syntastic_javascript_checkers=['eslint']
    " let g:syntastic_json_checkers=['jsonlint']
    " let g:syntastic_python_checkers=['pylint', 'pep8', 'python']

    " " uncomment both to enable auto check on file save
    " let g:syntastic_auto_loc_list=2 "0 don't open errors window if any found, 1 auto open and close if errors found 2 only close error windows if no remaining errors, don't force open it
    " let g:syntastic_check_on_open=1 " check syntax on file open
    " let g:syntastic_check_on_wq=0 " don't check syntax when save-quit (:x, :wq, :ZZ...)
    " " let g:syntastic_always_populate_loc_list=1
    " let g:syntastic_error_symbol='✗'
    " let g:syntastic_warning_symbol='⚠'
    " let g:syntastic_style_error_symbol = ''
    " let g:syntastic_style_warning_symbol = ''
    " let g:syntastic_enable_ballons=has('ballon_eval')
"}

"Neocomplcache {
    if exists('g:plugs["deoplete.nvim"]')
        let g:deoplete#enable_at_startup = 1

        call deoplete#custom#source('ternjs', 'mark','')
        call deoplete#custom#source('vim', 'mark','')
        call deoplete#custom#source('tag', 'mark','')

        " deoplete-tern config
        let g:deoplete#sources#ternjs#timeout = 1
        let g:deoplete#sources#ternjs#docs = 1
        let g:deoplete#sources#ternjs#guess = 0
        let g:deoplete#sources#ternjs#expand_word_forward = 0 "search word matches from cursor to back, not the whole word under cursor
    endif

" vim-markdown {
  let g:vim_markdown_auto_insert_bullets = 0 " Do not add new bullets to list on ENTER
  let g:vim_markdown_fenced_languages = ['bash=sh', 'html', 'css', 'json=javascript', 'javascript', 'python']
  let g:vim_markdown_frontmatter = 1        " YAML support
  let g:vim_markdown_toml_frontmatter = 1   " TOML support
  let g:vim_markdown_json_frontmatter = 1   " JSON FM support
" }


" PaperColor Theme {
" Enable comments in italic
let g:PaperColor_Theme_Options = {
    \   'theme' : {
    \       'default': {
    \           'allow_italic': 1
    \       }
    \   }
    \}
" }

" Solarized Theme {
if exists('g:plugs["Solarized"]')
    let g:solarized_termcolors=256
    let g:solarized_termtrans=1
    let g:solarized_contrast="normal"
    let g:solarized_visibility="normal"
    " color solarized " Load a colorscheme
endif
" }
"
"







    hi ALEErrorSign cterm=bold ctermfg=161 ctermbg=NONE gui=bold guifg=#F92672 guibg=NONE
    hi ALEWarningSign cterm=bold ctermfg=208 ctermbg=NONE gui=bold guifg=#FD971F guibg=NONE

