" Neoterm {
    if g:useneoterm
        let g:neoterm_position = 'horizontal'
        let g:neoterm_automap_keys = ',tt'

        " nnoremap <silent> <f10> :TREPLSendFile<cr>
        " nnoremap <silent> <f9> :TREPLSendLine<cr>
        " vnoremap <silent> <f9> :TREPLSendSelection<cr>

        " " Useful maps
        " " hide/close terminal
        " nnoremap <silent> ,th :call neoterm#close()<cr>
        " " clear terminal
        " nnoremap <silent> ,tl :call neoterm#clear()<cr>
        " " kills the current job (send a <c-c>)
        " nnoremap <silent> ,tc :call neoterm#kill()<cr>

        " " Rails commands
        " command! Troutes :T rake routes
    endif
" }
" Solarized Theme {
    if filereadable(expand("~/.vim/bundle/vim-colors-solarized/colors/solarized.vim"))
        let g:solarized_termcolors=256
        let g:solarized_termtrans=1
        let g:solarized_contrast="normal"
        let g:solarized_visibility="normal"
        " color solarized " Load a colorscheme
    endif
" }

" NerdTREE {
    let g:NERDTreeDirArrowExpandable = 'â–¸'
    let g:NERDTreeDirArrowCollapsible = 'â–¾'
    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['\.pyc','\.$', '\.\.$', '\~$', '\.swo$','\.swp$', '\.git$', '\.hg$', '\.svn$', '\.bzr$', 'node_modules$[[dir]]', 'build$[[dir]]', 'packages$[[dir]]', 'pub$[[dir]]']
    let NERDTreeRespectWildIgnore=1 "Respect wildingore setting
    let NERDTreeChDirMode=2
    let NERDTreeQuitOnOpen=1
    let NERDTreeMouseMode=2
    let NERDTreeShowHidden=1
    let NERDTreeKeepTreeInNewTab=1
    let g:nerdtree_tabs_open_on_gui_startup=0
    let g:NERDTreeHijackNetrw = 0
" }
" CtrlP {
"   Bundle 'kien/ctrlp.vim'
    " let g:ctrlp_working_path_mode = 'ra'
    let g:ctrlp_working_path_mode = ''
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\.git$\|\.hg$\|\.svn$\|node_modules$',
        \ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }
    if executable('ag')
        " Replace native grep with ag
        set grepprg=ag\ --nogroup\ --nocolor\ --column
        set grepformat=%f:%l:%c%m
        " set ctrlp to use ag
        " let g:ctrlp_user_command = 'ag --nocolor -l -g "" %s'
        let g:ctrlp_user_command = 'ag --nocolor 
            \ --ignore .git
            \ --ignore .pub
            \ --ignore packages
            \-l -g "" %s'
        let g:ctrlp_use_caching=1 
        " let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
    elseif executable('ack')
        let s:ctrlp_fallback = 'ack %s --nocolor -f'
    elseif has("win32")
        " On Windows use "dir" as fallback command.
        let s:ctrlp_fallback = 'dir %s /-n /b /s /a-d'
    endif
" }

" EMMET (HTML) {
    " let g:user_emmet_mode='n'    "only enable normal mode functions.
    " let g:user_emmet_mode='inv'  "enable all functions, which is equal to
    " let g:user_emmet_mode='a'    "enable all function in all mode.
    " To enable only for html/css files:
    let g:user_emmet_install_global = 0
    autocmd FileType html,css EmmetInstall
    "Trigger key is <C-Y> , (ctrl+y ,) con la coma tras el ctrl y
    " let g:user_emmet_leader_key='<C-Z>' " para cambiar la parte del ctrl y
" }

" Surround {
" En visual o command mode
" "Hello World!" -> cs"<p> -> <p>Hello World!</p>
" <p>Hello World!</p> -> cst" -> "Hello World!"
" "Hello World!" -> ds" -> Hello World
" <line visual mode V>
" Hello World -> S<p class="toto"> ->
" <p class="toto">
"   Hello World
" </p>
" and so on
" }

" Vim-Javascript {
    "let g:javascript_conceal_function   = "Æ’"
    let g:javascript_conceal_null       = "Ã¸"
    "let g:javascript_conceal_this       = "@"
    "let g:javascript_conceal_return     = "â‡š"
    "let g:javascript_conceal_undefined  = "Â¿"
    let g:javascript_conceal_NaN        = "â„•"
    "let g:javascript_conceal_prototype  = "Â¶"
    "let g:javascript_conceal_static     = "â€¢"
    "let g:javascript_conceal_super      = "Î©"
" }
" JavaScript Libraries Syntax {
    let g:used_javascript_libs = 'angularjs,react'
" }
" JSON {
    let g:vim_json_syntax_conceal = 0
" }
" TypeScript {
    " If indenting does not work as desired
    " let g:typescript_indent_disable = 1
    " Compiler options
    " let g:typescript_compiler_binary = 'tsc'
    " let g:typescript_compiler_options = ''
" }
"Syntastic {
    let g:syntastic_javascript_checkers=['jshint']
    let g:syntastic_json_checkers=['jsonlint']
    let g:syntastic_python_checkers=['pylint', 'pep8', 'python']
    "let g:syntastic_cpp_checkers=['gcc','cppcheck','cpplint','ycm','clang_tidy','clang_check']
    "let g:syntastic_c_checkers=['gcc','make','cppcheck','clang_tidy','clang_check']
    let g:syntastic_sh_checkers=['sh', 'shellcheck', 'checkbashisms']
    let g:syntastic_vim_checkers=['vimlint']


    " uncomment both to enable auto check on file save
    let g:syntastic_auto_loc_list=1
    let g:syntastic_check_on_open=1
    let g:syntastic_enable_signs=1
    " let g:syntastic_always_populate_loc_list=1
    let g:syntastic_error_symbol='âœ—'
    let g:syntastic_warning_symbol='âš '
    let g:syntastic_style_error_symbol = 'âœ‹'
    let g:syntastic_style_warning_symbol = 'ðŸ’©'
    let g:syntastic_enable_ballons=has('ballon_eval')
"}

"Vim test {
    if has('gui_running')
        let test#strategy = "asyncrun"
    endif
"}

" Airline {
    let g:airline_powerline_fonts=1
    if !has('gui_running')
        let g:airline_powerline_fonts=1
        "let g:airline_left_sep='â€º' " Slightly fancier than '>'
        "let g:airline_right_sep='â€¹' " Slightly fancier than '<'
    endif
    if has('nvim')
        let g:airline#extensions#tabline#enabled = 1 " Enable viewing buffers/tabs in the top line
        let g:airline#extensions#tabline#show_buffers = 0 " Don't show buffers
        let g:airline#extensions#tabline#show_tabs = 1 " Don't show tabs
        " all buffers in top line
    else
        let g:airline#extensions#tabline#show_buffers = 0 " Don't show buffers
    endif
    " let g:airline_theme = 'dark' " Force theme , see :echo g:airline_theme_map for more choices
    let g:airline#extensions#syntastic#enabled = 1
    let g:airline#extensions#tagbar#enabled = 1
    let g:airline#extensions#wordcount#enabled = 0
" }

"Neocomplcache {
    " if has("python")
    "     let g:ycm_path_to_python_interpreter = 'C:\Python27\python.exe'
    " elseif has("lua")        
    if has("lua")
        let g:acp_enableAtStartup = 0   " Disable built in autocmplete
        let g:neocomplete#enable_at_startup = 1 " use neocompl cache
        let g:neocomplete#enable_auto_select = 1 "automatically select first candidate
        let g:neocomplete#enable_cursor_hold_i = 1 " auto open select list when cursos is on a word
        let g:neocomplete#enable_ignore_case = 1 " ignore case...
        let g:neocomplete#enable_smart_case = 1 " unless word starts by capital letter
        let g:neocomplete#enable_auto_delimiter = 1 " Insert delimiter (parenthesis for functions, etc)
        let g:neocomplete#sources#syntax#min_keyword_length = 3
        let g:neocomplete#auto_completion_start_length = 3
        let g:neocomplete#manual_completion_start_length = 1
        let g:neocomplete#enable_insert_char_pre = 1 " Prevent popup to display when moving using arrows
        " Define dictionary.
        let g:neocomplete#dictionary_filetype_lists = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
            \ }

        " Define keyword.
        if !exists('g:neocomplete#keyword_patterns')
            let g:neocomplete#keyword_patterns = {}
        endif
        let g:neocomplete#keyword_patterns['default'] = '\h\w*'
    elseif has("python")
        let g:ycm_path_to_python_interpreter = 'C:\Python27\python.exe'
    else
        let g:neocomplcache_enable_at_startup = 1 " use neocompl cache
        let g:neocomplcache_enable_cursor_hold_i = 1
        let g:neocomplcache_enable_ignore_case = 1 " ignore case...
        let g:neocomplcache_enable_smart_case = 1 " unless word starts by capital letter
        let g:neocomplcache_enable_auto_delimiter = 1 " Insert delimiter (parenthesis for functions, etc)
        " let g:neocomplcache_max_list = 20
        " let g:neocomplcache_force_overwrite_completefunc = 1
        let g:neocomplcache_auto_completion_start_length = 3
        let g:neocomplcache_enable_insert_char_pre = 1 " Prevent popup to display when moving using arrows
        " Define dictionary.
        let g:neocomplcache_dictionary_filetype_lists = {
            \ 'default' : '',
            \ 'vimshell' : $HOME.'/.vimshell_hist',
            \ 'scheme' : $HOME.'/.gosh_completions'
            \ }"Plugin 'toyamarinyon/vim-swift'

"         " Define keyword.
"         if !exists('g:neocomplcache_keyword_patterns')
"             let g:neocomplcache_keyword_patterns = {}
"         endif
"         let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
     endif
" "            " Key Mappings
" "            " CR: select and close the popup
" "            inoremap <expr><CR> pumvisible() ? neocomplcache#close_popup() :
" "            "\<CR>""

" " }

" jedi-vim {
    
" }

" neosnippet (needs Nocomplcache) {
    " let g:neosnippet#disable_runtime_snippets = { "_": 1, } " by default disable runtime snippets for all files
    " let g:neosnippet#enable_snipmate_compatibility = 1 " Enable neosnippet snipmate compatibility mode
    " let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets' " Use honza's snippets
    " " For snippet_complete marker.
    " if has('conceal')
    "     set conceallevel=2 concealcursor=i
    " endif
" }
